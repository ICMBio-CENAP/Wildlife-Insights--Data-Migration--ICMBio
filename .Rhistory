cam_bu$make <- cam_info$Make
cam_bu$model <- cam_info$Model
# If serial number and year purchased are available add them in as well.
cam_bu$serial_number <- cam_info$`Serial Number`
cam_bu$year_purchased <- cam_info$`Year Purchased`
# Notes: We will also try to get information from image EXIF data upon data ingestion into WI.
######
# Deployment Batch Upload Template: Fill in the information related to each deployment. A deployment is a sensor
# observing wildlife for some amount of time in a specific location.
#
# 1. Establish unique deployments - Should be Site.Name + pair(SessionStart.Date--> Session.End.Date)
#ct_data_taxa$deployments <- paste(ct_data_taxa$Site.Name,ct_data_taxa$Session.Start.Date,ct_data_taxa$Session.End.Date,sep="-")
# 2. Create a distinct dataframe based on deployments
dep_temp<-distinct(deployments,`Deployment ID`,.keep_all = TRUE )
# 3. Get the empty deployement dataframe
dep_bu <- wi_batch_function("Deployment",nrow(dep_temp))
# 4. Fill in the deployment batch upload template
dep_bu$project_id <- unique(prj_bu$project_id) # If more than one error for now
dep_bu$deployment_id <- dep_temp$`Deployment ID`
dep_bu$placename <- dep_temp$`Depolyment Location ID`
dep_bu$longitude <- dep_temp$`Longitude Resolution`
dep_bu$latitude <- dep_temp$`Latitude Resolution`
dep_bu$start_date <- dep_temp$new_begin
dep_bu$end_date <- dep_temp$new_end
dep_bu$event <- dep_temp$`Event Name`
dep_bu$array_name <- dep_temp$`Array Name (Optional)`
dep_bu$bait_type <- "None" # Note that if bait was ussed but it was not consistent across all deployments, this is where you enter it.
# Logic may be needed to figure out which deployments had bait and which didn't. Similar thing if "bait type" was vaired in deployments.
# Options: Yes, some, No.  We may need a way to assign this if answer = "some".
dep_bu$bait_description <- NA
dep_bu$feature_type <- dep_temp$`Feature Type` # Road paved, Road dirt, Trail hiking, Trail game, Road underpass, Road overpass, Road bridge, Culvert, Burrow, Nest site, Carcass, Water source, Fruiting tree, Other
dep_bu$feature_type[which(is.na(dep_temp$`Feature Type`))] <- "None"
dep_bu$feature_type_methodology <- NA
dep_bu$camera_id <- dep_temp$`Camera ID`
dep_bu$quiet_period  <- dep_temp$`Quiet Period Setting`
dep_bu$camera_functioning[which(dep_temp$`Camera Hardware Failure` == "Functioning")] <- "Camera Functioning"  # Required: Camera Functioning,Unknown Failure,Vandalism,Theft,Memory Card,Film Failure,Camera Hardware Failure,Wildlife Damage
dep_bu$camera_functioning[which(is.na(dep_temp$`Camera Hardware Failure`))] <- "Camera Functioning"
dep_bu$sensor_height  <- "Knee height"
dep_bu$height_other  <- NA
dep_bu$sensor_orientation  <- "Parallel"
dep_bu$orientation_other  <- NA
dep_bu$recorded_by <- NA
# Load in your clean taxonomy. Clean taxononmy is created using the WI_Taxonomy.R file.
#your_taxa <- read.csv(paste(dir_path,"taxonomic_mapping_template_ALM.csv",sep=""),sep=";", colClasses = "character",strip.white = TRUE,na.strings="")
#your_taxa <- read.csv(paste(dir_path,"taxonomic_mapping_FNS.csv",sep=""),sep="", colClasses = "character",strip.white = TRUE,na.strings="")
source(here("WI_Global_Taxonomy", "WI_Taxonomy.R"))
# create vector of unique species
original_gs <- data.frame(unique(images[7]))
original_gs
# Fix some names so they are compatible with the WI global taxonomy
#original_gs[original_gs == "Canis lupus familiaris"] <- "Canis lupus"
#original_gs <- original_gs[-1] # remove empty entry
original_gs<-original_gs[!(original_gs==" "),]
#original_gs<-original_gs[!(original_gs=="Mellivora capensis")]
levels(original_gs)[levels(original_gs)=="Puma yagouaroundi"] <- "Herpailurus yagouaroundi"
names(original_gs) <- NULL
# separate genus from species
library(tidyverse)
#df <- data.frame(str_split(original_gs[,1], " ", simplify = T))
df <- data.frame(str_split(original_gs, " ", simplify = T))
names(df) <- c('genus', 'species')
#transform unknown species into NA
df$species <- as.character(df$species)
#df$species[df$species=="unknown"] <- NA
df$species[df$species=="unknown"] <- ""
df
# line 164
# create vector of unique species
original_gs <- data.frame(unique(images[7]))
# Fix some names so they are compatible with the WI global taxonomy
#original_gs[original_gs == "Canis lupus familiaris"] <- "Canis lupus"
#original_gs <- original_gs[-1] # remove empty entry
original_gs<-original_gs[!(original_gs==" "),]
#original_gs<-original_gs[!(original_gs=="Mellivora capensis")]
levels(original_gs)[levels(original_gs)=="Puma yagouaroundi"] <- "Herpailurus yagouaroundi"
levels(original_gs)[levels(original_gs)=="Cebus kaapori"] <- "Cebus unknown"
#levels(original_gs)[levels(original_gs)=="Cebus apella"] <- "Sapajus apella"
#original_gs <- data.frame(factor(original_gs))
names(original_gs) <- NULL
# separate genus from species
library(tidyverse)
#df <- data.frame(str_split(original_gs[,1], " ", simplify = T))
df <- data.frame(str_split(original_gs, " ", simplify = T))
names(df) <- c('genus', 'species')
# add lupus familiaris. first, convert to character
#df$species <- as.character(df$species)
#df[df$species == "lupus", "species"] <- "lupus familiaris"
#df$species <- factor(df$species)
#transform unknown species into NA
df$species <- as.character(df$species)
#df$species[df$species=="unknown"] <- NA
df$species[df$species=="unknown"] <- ""
# create empty dataframe to become taxonomic mapping template
#m <- matrix(NA, ncol = 11, nrow = nrow(original_gs))
m <- matrix(NA, ncol = 11, nrow = length(original_gs))
m <- data.frame(m)
names(m) <- c("original_gs","Your_genus","Your_species","Your_nonspecies","class","order","family","genus","species","commonNameEnglish","uniqueIdentifier")
m$original_gs <- original_gs
m$Your_genus <- df$genus
m$Your_species <- df$species
#m <- m[-1,]
#View(m)
for(i in 1:nrow(m)){
df1 <- filter(wi_taxa_data, genus == as.character(m[i,2]) & species == as.character(m[i,3]))
m[i,1] <- original_gs[i]
m[i,5] <- as.character(unique(df1$class))
m[i,6] <- as.character(unique(df1$order))
m[i,7] <- as.character(unique(df1$family))
m[i,8] <- as.character(unique(df1$genus))
m[i,9] <- as.character(unique(df1$species))
m[i,10] <- as.character(df1$commonNameEnglish[1])
m[i,11] <- as.character(df1$uniqueIdentifier[1])
}
colnames(m) <- c("original_gs","Your_genus","Your_species","Your_nonspecies","class","order","family","genus","species","commonNameEnglish","uniqueIdentifier")
#View(m) # check and use m as the taxonomic_mapping object
# add non-species
non.spp <- read.csv(here("WI_Global_Taxonomy", "non-spp.csv"), sep=";")
mapping.template <- rbind(m, non.spp)
rownames(mapping.template) <- 1:nrow(mapping.template)
#View(mapping.template)
names(m)
names(non.spp)
names(mapping.template)
mapping.template
# Load in your clean taxonomy. Clean taxononmy is created using the WI_Taxonomy.R file.
#your_taxa <- read.csv(paste(dir_path,"taxonomic_mapping_template_ALM.csv",sep=""),sep=";", colClasses = "character",strip.white = TRUE,na.strings="")
#your_taxa <- read.csv(paste(dir_path,"taxonomic_mapping_FNS.csv",sep=""),sep="", colClasses = "character",strip.white = TRUE,na.strings="")
source(here("WI_Global_Taxonomy", "WI_Taxonomy.R"))
source(here("WI_Global_Taxonomy", "create-taxonomic-mapping-PNJU.R"))
your_taxa <- mapping.template
#your_taxa <- as_tibble(your_taxa) # not sure if this is needed, if not remove later
#Create a join column that accounts for both species and non-species labels from your
your_taxa$join_taxa <- as.character(your_taxa$original_gs)
#your_taxa <- your_taxa %>% add_column(join_taxa = your_taxa$original_gs)
# Add in the non-species original names
your_taxa$join_taxa[which(!is.na(your_taxa$Your_nonspecies))] <-  your_taxa$Your_nonspecies[which(!is.na(your_taxa$Your_nonspecies))]
# Do the same with the images dataframe
images$join_taxa <- images$`Genus Species`
# do same fixes as in creat-taxonomic-mapping
levels(images$join_taxa)[levels(images$join_taxa)=="Puma yagouaroundi"] <- "Herpailurus yagouaroundi"
#levels(images$join_taxa)[levels(images$join_taxa)=="Psophia unknown"] <- "Psophia dextralis"
levels(images$join_taxa)[levels(images$join_taxa)=="Cebus kaapori"] <- "Cebus unknown"
images$join_taxa <- as.character(images$join_taxa)
images$join_taxa[images$join_taxa==" "] <- NA
images$join_taxa[images$join_taxa==""] <- NA
images$join_taxa[which(is.na(images$join_taxa))] <- as.character(images$`Photo Type`[which(is.na(images$join_taxa))])
# Join the WI taxonomy back into the images dataframe.
images_taxa <- left_join(images,your_taxa,by="join_taxa")
# Check the taxa
check <- distinct(images_taxa,class,order,family,genus,species,commonNameEnglish,uniqueIdentifier)
check
no_wi <- filter(images_taxa, is.na(uniqueIdentifier))
# Pulling out records that don't have unique identifier (this is a result of a photo.Type is NA)
# Create a check. If Photo.Type is.na there is an error with these or they have not bee identified.
images_taxa <- filter(images_taxa, !is.na(uniqueIdentifier))
no_wi <- filter(images_taxa, is.na(uniqueIdentifier))
no_wi
# 2. Image file path adjustments
# Change the file path names for your images. Supply what your original path (original_path) with a replacement string (sub_path)
# Once your images are in GCP they will have an address like:
# gs://cameratraprepo-vcm/CafeFaunaAMPeru/Wild_ID_ALM/ALM_2018_249-1/IMG_0001.JPG
# Handle any windows directory backslashes
images_taxa$new_location <- gsub("\\\\","/",images_taxa$Location)
#images_taxa$wi_path <- paste("gs://cameratraprepo-vcm/CafeFaunaAMPeru/Wild_ID_",images_taxa$`Project ID`,"/",images_taxa$new_location,sep="")
images_taxa$wi_path <- paste("gs://icmbio/juruena","/",images_taxa$new_location,sep="")
images_taxa$wi_path
#images_taxa$wi_path <- paste("gs://cameratraprepo-vcm/CafeFaunaAMPeru/Wild_ID_",images_taxa$`Project ID`,"/",images_taxa$new_location,sep="")
images_taxa$wi_path <- paste("gs://icmbio/juruena/2016","/",images_taxa$new_location,sep="")
images_taxa$wi_path
images_taxa$wi_path
# 3. Load in the Image batch upload template
image_bu <- wi_batch_function("Image",nrow(images_taxa))
######
# Image .csv template
image_bu$project_id<- unique(prj_bu$project_id)
image_bu$deployment_id <- images_taxa$`Deployment ID`
image_bu$image_id <- images_taxa$`Image ID`
image_bu$location <- images_taxa$wi_path
image_bu$is_blank[which(images_taxa$commonNameEnglish == "Blank")] <- "Yes" # Set Blanks to Yes,
image_bu$is_blank[which(images_taxa$commonNameEnglish != "Blank")] <- "No"
image_bu$wi_taxon_id <- images_taxa$uniqueIdentifier
image_bu$class <- images_taxa$class
image_bu$order <- images_taxa$order
image_bu$family <- images_taxa$family
image_bu$genus <- images_taxa$genus
image_bu$species <- images_taxa$species
image_bu$common_name <- images_taxa$commonNameEnglish
image_bu$uncertainty <- images_taxa$Uncertainty
image_bu$timestamp <- images_taxa$`Date_Time Captured`
image_bu$age <- images_taxa$Age
image_bu$sex <- images_taxa$Sex
image_bu$animal_recognizable <- images_taxa$`Animal recognizable (Y/N)`
image_bu$number_of_animals <- images_taxa$Count
image_bu$individual_id <- images_taxa$`Individual ID`
image_bu$individual_animal_notes <- images_taxa$`Individual Animal Notes`
image_bu$highlighted <- NA
image_bu$color <- NA
image_bu$identified_by <- images_taxa$`Photo Type Identified by`
# Get a clean site name first - no whitespaces
site_name_clean <- gsub(" ","_",prj_bu$project_name)
site_name_clean <- paste(site_name_clean,"_wi_batch_upload",sep="")
site_name_clean
# Create the directory
#dir.create(path = paste(dir_path,site_name_clean, sep=""))
dir.create(path = paste(here("batch-upload"), site_name_clean, sep="/"))
# Change any NAs to emptyp values
prj_bu <- prj_bu %>% replace(., is.na(.), "")
cam_bu <- cam_bu %>% replace(., is.na(.), "")
dep_bu <- dep_bu %>% replace(., is.na(.), "")
image_bu <- image_bu %>% replace(., is.na(.), "")
# Write out the 4 csv files for required for Batch Upload.
# This directory needs to be uploaded to the Google Cloud with the filenames named exactly
# as written below. They have to be called: projects.csv, cameras.csv,deployments.csv,images.csv
write.csv(prj_bu,file=here("batch-upload", site_name_clean, "projects.csv"), row.names = FALSE)
write.csv(cam_bu,file=here("batch-upload", site_name_clean, "cameras.csv"),row.names = FALSE)
write.csv(dep_bu,file=here("batch-upload", site_name_clean, "deployments.csv"),row.names = FALSE)
write.csv(image_bu,file=here("batch-upload", site_name_clean, "images.csv"),row.names = FALSE)
# load libraries
library(tidyverse)
library(here)
# read file
maraca <- read.csv(here("Datasets", "maraca", "esecmaraca_team_2018_raw data_final.csv"))
attach(maraca)
names(maraca)
view(maraca)
# code to get csv export from wild.ID into Wildlife insights format
# written by Elildo CArvalho Jr, 2020-06-06
# load libraries
library(tidyverse)
library(here)
# read file
sbr <- read.csv(here("Datasets", "Sao-Benedito-River", "Wild_ID_SBR_2017.csv"))
attach(sbr)
# create "Image" file from csv
Image <- tibble("Project ID" = Project.Name, "Deployment ID" = Camera.Trap.Name,
"Image ID" = paste(Camera.Trap.Name, Raw.Name, sep="_"),
"Location" =  paste(Camera.Trap.Name, Raw.Name, sep="/"),
"Photo Type" =  Photo.Type, "Photo Type Identified by" =  Person.Identifying.the.Photo,
"Genus Species" = paste(Genus, Species, sep=" "), "Uncertainty" = NA,
"IUCN Identification Number" = NA, "Date_Time Captured" = paste(Photo.Date, Photo.time, sep=" "),
"Age" = NA,  "Sex" = NA, "Individual ID" = NA,  "Count" =  Number.of.Animals,
"Animal recognizable (Y/N)" = NA, "Individual Animal Notes" = NA)
teste <- Image
# code to get csv export from wild.ID into Wildlife insights format
# written by Elildo Carvalho Jr, 2020-06-06
# load libraries
library(tidyverse)
library(here)
# read file
maraca <- read.csv(here("Datasets", "maraca", "esecmaraca_team_2018_raw data_final.csv"))
View(teste)
cts.id
substr(cts.id, 1, stop = 8)
cts.id
substr(cts.id, start=1)
substr(cts.id, start=1, stop = 19)
substr(cts.id, start=8, stop = 19)
substr(cts.id, start=9, stop = 19)
substr(cts.id, start=9, stop = 20)
# code to get csv export from wild.ID into Wildlife insights format
# written by Elildo CArvalho Jr, 2020-06-06
# load libraries
library(tidyverse)
library(here)
# read file
jamari <- read.csv(here("Datasets", "jamari", "Wild_ID_FLONA_JAMARI_2016_updated.csv"))
View(jamari)
sort(unique(jamari$Camera.Trap.Name]))
sort(unique(jamari$Camera.Trap.Name))
# code to get csv export from wild.ID into Wildlife insights format
# written by Elildo Carvalho Jr, 2020-06-06
# load libraries
library(tidyverse)
library(stringr)
library(here)
##----- 1 - Read and fix raw data-----
juruena <- read.csv(here("Datasets", "juruena", "Wild_ID_PNJU_2016.csv"))
#attach(juruena)
juruena$Sampling.Event <- 2016
juruena$Camera.Trap.Name <- as.factor(juruena$Camera.Trap.Name)
levels(juruena$Camera.Trap.Name) # camera-trap names differ from all other datasets. Find out why and fix
levels(juruena$Camera.Trap.Name)
levels(juruena$Camera.Trap.Name)
names(juruena)
##-----3 - Read data -----
data <- juruena
library(ggmap)
library(here)
# Start with provide the lon/lat range of the data
lon <- range(data$Longitude, na.rm=T)
lat <- range(data$Latitude, na.rm=T)
# Extract the unique lat/lons and put them on a data frame
locations.data <- unique(cbind(as.character(data$transec.time), data$Latitude, data$Longitude))
locations.data <- data.frame(transec.time = locations.data[,1], Latitude = as.numeric(locations.data[,2]), Longitude = as.numeric(locations.data[,3]))
locations.data <- dplyr::arrange(locations.data, transec.time)
# Extract the unique lat/lons and put them on a data frame
locations.data <- unique(cbind(as.character(data$Camera.Trap.Name), data$Latitude, data$Longitude))
locations.data <- data.frame(transec.time = locations.data[,1], Latitude = as.numeric(locations.data[,2]), Longitude = as.numeric(locations.data[,3]))
locations.data <- dplyr::arrange(locations.data, transec.time)
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 10, source = "google", maptype = "satellite")
##-----3 - Read data -----
data <- juruena
# Start with provide the lon/lat range of the data
lon <- range(data$Longitude, na.rm=T)
lat <- range(data$Latitude, na.rm=T)
# Extract the unique lat/lons and put them on a data frame
locations.data <- unique(cbind(as.character(data$Camera.Trap.Name), data$Latitude, data$Longitude))
locations.data
locations.data <- data.frame(Camera.Trap.Name = locations.data[,1], Latitude = as.numeric(locations.data[,2]), Longitude = as.numeric(locations.data[,3]))
locations.data
locations.data <- dplyr::arrange(locations.data, transec.time)
locations.data <- dplyr::arrange(locations.data, Camera.Trap.Name)
locations.data
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 10, source = "google", maptype = "terrain")
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 16, source = "google", maptype = "terrain")
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 10, source = "google", maptype = "terrain")
### Generate spatial distributions
check.coord <- function(data) {
##----- 1 - Load libraries-----
library(ggmap)
library(here)
##-----2 - Read data -----
data <- juruena
##-----3 - Generate spatial distributions -----
# Start with provide the lon/lat range of the data
lon <- range(data$Longitude, na.rm=T)
lat <- range(data$Latitude, na.rm=T)
# Extract the unique lat/lons and put them on a data frame
locations.data <- unique(cbind(as.character(data$Camera.Trap.Name), data$Latitude, data$Longitude))
locations.data <- data.frame(Camera.Trap.Name = locations.data[,1], Latitude = as.numeric(locations.data[,2]), Longitude = as.numeric(locations.data[,3]))
locations.data <- dplyr::arrange(locations.data, Camera.Trap.Name)
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 10, source = "google", maptype = "terrain")
# Plot the locations of Camera traps
ggmap(map, extent = "normal", maprange = T) + geom_point(data=locations.data, aes(x = Longitude, y = Latitude), colour="black", size = 0.1)
} # end of function
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 20, source = "google", maptype = "terrain")
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 18, source = "google", maptype = "terrain")
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 8, source = "google", maptype = "terrain")
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 6, source = "google", maptype = "terrain")
# Plot the locations of Camera traps
ggmap(map, extent = "normal", maprange = T) + geom_point(data=locations.data, aes(x = Longitude, y = Latitude), colour="black", size = 0.1)
locations.data
dim(subset(PNJU, Camera.Trap.Name == "CT-PNJU-1-23"))
dim(subset(juruena, Camera.Trap.Name == "CT-PNJU-1-23"))
##----- 1 - Read and fix raw data-----
juruena <- read.csv(here("Datasets", "juruena", "Wild_ID_PNJU_2016.csv"))
#attach(juruena)
juruena$Sampling.Event <- 2016
juruena$Camera.Trap.Name <- as.factor(juruena$Camera.Trap.Name)
levels(juruena$Camera.Trap.Name) # camera-trap names differ from all other datasets. Find out why and fix
# check date errors
juruena$Camera.End.Date <- as.Date(juruena$Camera.End.Date, format="%Y-%m-%d")
juruena$Camera.Start.Date <- as.Date(juruena$Camera.Start.Date, format="%Y-%m-%d")
juruena$Photo.Date <- as.Date(juruena$Photo.Date, format="%Y-%m-%d")
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date)
min(juruena$Photo.Date); max(juruena$Photo.Date)
sort(unique(juruena$Photo.Date))
juruena <- juruena[juruena$Photo.Date > "2016-02-09",] # dropping camera with wrong dates
min(juruena$Photo.Date); max(juruena$Photo.Date) # checking again
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date) # check again Start and End dates
sort(unique(juruena$Camera.Start.Date))
# fix start dates using minimum photo date
for(i in 1:nrow(juruena)){
if (juruena$Camera.Start.Date[i] < min(juruena$Photo.Date)) {
df1 <- subset(juruena, Camera.Trap.Name == juruena$Camera.Trap.Name[i])
min <- min(df1$Photo.Date)
juruena$Camera.Start.Date[i] <-  min
}
}
sort(unique(juruena$Camera.Start.Date)) # check, OK
# fix end dates using max photo date
for(i in 1:nrow(juruena)){
if (juruena$Camera.End.Date[i] > max(juruena$Photo.Date)) {
df1 <- subset(juruena, Camera.Trap.Name == juruena$Camera.Trap.Name[i])
max <- max(df1$Photo.Date)
juruena$Camera.End.Date[i] <-  max
}
}
sort(unique(juruena$Camera.Start.Date)) # check, OK
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date)
# check the time lag between start date and 1st photo, last photo and end date
# if lag is too large there is still something wrong in dates, fix by redefining start and end dates
time.lag <- function(data){
df <- data.frame(matrix(NA, nrow = length(unique(data$Camera.Trap.Name)), ncol = 3))
names(df) <- c("Camera.Trap.Name", "diff.start", "diff.end")
df$Camera.Trap.Name <- unique(data$Camera.Trap.Name)
for(i in 1:nrow(df)){
df1 <- subset(data, Camera.Trap.Name == df[i,1])
start <- as.Date(min(df1$Camera.Start.Date))
end <- as.Date(max(df1$Camera.End.Date))
min.photo <- as.Date(min(df1$Photo.Date))
max.photo <- as.Date(max(df1$Photo.Date))
df[i,2] <- min.photo-start
df[i,3] <- end-max.photo
}
return(df) # check
}
time.lag(juruena) # check
# wrong ends for CT-PNJU-2-2 and CT-PNJU-2-9, fix using day of last photo
juruena[juruena$Camera.Trap.Name=="CT-PNJU-2-2",]$Camera.End.Date <- max(subset(juruena, Camera.Trap.Name=="CT-PNJU-2-2")$Photo.Date)
juruena[juruena$Camera.Trap.Name=="CT-PNJU-2-9",]$Camera.End.Date <- max(subset(juruena, Camera.Trap.Name=="CT-PNJU-2-9")$Photo.Date)
##----- 2 - Check spatial distribution of cameras
check.coord(juruena)
# source file
source(here("Transformation_Code", "Generic_Functions", "generate_spatial_distributions.R"))
# source file
source(here("Transformation_Code", "Generic_Functions", "generate-spatial-distributions.R"))
##----- 2 - Check spatial distribution of cameras
check.coord(juruena)
##----- 2 - Check spatial distribution of cameras
check.coord(juruena)
locations.data
# code to get csv export from wild.ID into Wildlife insights format
# written by Elildo Carvalho Jr, 2020-06-06
# load libraries
library(tidyverse)
library(stringr)
library(here)
# source file
source(here("Transformation_Code", "Generic_Functions", "generate-spatial-distributions.R"))
##----- 1 - Read and fix raw data-----
juruena <- read.csv(here("Datasets", "juruena", "Wild_ID_PNJU_2016.csv"))
#attach(juruena)
juruena$Sampling.Event <- 2016
juruena$Camera.Trap.Name <- as.factor(juruena$Camera.Trap.Name)
levels(juruena$Camera.Trap.Name) # camera-trap names differ from all other datasets. Find out why and fix
# check date errors
juruena$Camera.End.Date <- as.Date(juruena$Camera.End.Date, format="%Y-%m-%d")
juruena$Camera.Start.Date <- as.Date(juruena$Camera.Start.Date, format="%Y-%m-%d")
juruena$Photo.Date <- as.Date(juruena$Photo.Date, format="%Y-%m-%d")
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date)
min(juruena$Photo.Date); max(juruena$Photo.Date)
sort(unique(juruena$Photo.Date))
juruena <- juruena[juruena$Photo.Date > "2016-02-09",] # dropping camera with wrong dates
min(juruena$Photo.Date); max(juruena$Photo.Date) # checking again
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date) # check again Start and End dates
sort(unique(juruena$Camera.Start.Date))
# fix start dates using minimum photo date
for(i in 1:nrow(juruena)){
if (juruena$Camera.Start.Date[i] < min(juruena$Photo.Date)) {
df1 <- subset(juruena, Camera.Trap.Name == juruena$Camera.Trap.Name[i])
min <- min(df1$Photo.Date)
juruena$Camera.Start.Date[i] <-  min
}
}
sort(unique(juruena$Camera.Start.Date)) # check, OK
# fix end dates using max photo date
for(i in 1:nrow(juruena)){
if (juruena$Camera.End.Date[i] > max(juruena$Photo.Date)) {
df1 <- subset(juruena, Camera.Trap.Name == juruena$Camera.Trap.Name[i])
max <- max(df1$Photo.Date)
juruena$Camera.End.Date[i] <-  max
}
}
sort(unique(juruena$Camera.Start.Date)) # check, OK
min(juruena$Camera.Start.Date); max(juruena$Camera.End.Date)
# check the time lag between start date and 1st photo, last photo and end date
# if lag is too large there is still something wrong in dates, fix by redefining start and end dates
time.lag <- function(data){
df <- data.frame(matrix(NA, nrow = length(unique(data$Camera.Trap.Name)), ncol = 3))
names(df) <- c("Camera.Trap.Name", "diff.start", "diff.end")
df$Camera.Trap.Name <- unique(data$Camera.Trap.Name)
for(i in 1:nrow(df)){
df1 <- subset(data, Camera.Trap.Name == df[i,1])
start <- as.Date(min(df1$Camera.Start.Date))
end <- as.Date(max(df1$Camera.End.Date))
min.photo <- as.Date(min(df1$Photo.Date))
max.photo <- as.Date(max(df1$Photo.Date))
df[i,2] <- min.photo-start
df[i,3] <- end-max.photo
}
return(df) # check
}
time.lag(juruena) # check
# wrong ends for CT-PNJU-2-2 and CT-PNJU-2-9, fix using day of last photo
juruena[juruena$Camera.Trap.Name=="CT-PNJU-2-2",]$Camera.End.Date <- max(subset(juruena, Camera.Trap.Name=="CT-PNJU-2-2")$Photo.Date)
juruena[juruena$Camera.Trap.Name=="CT-PNJU-2-9",]$Camera.End.Date <- max(subset(juruena, Camera.Trap.Name=="CT-PNJU-2-9")$Photo.Date)
##----- 2 - Check spatial distribution of cameras
check.coord(juruena)
# Generate spatial distributions
# Code to check if Latitude and Longitude are OK
# Adapted from a previous script by Jorge Ahumada
# Elildo Carvalho Jr @ ICMBio/CENAP, 2020-04-02
### Generate spatial distributions
check.coord <- function(data) {
##----- 1 - Load libraries-----
library(ggmap)
library(here)
##-----2 - Generate spatial distributions -----
# Start with provide the lon/lat range of the data
lon <- range(data$Longitude, na.rm=T)
lat <- range(data$Latitude, na.rm=T)
# Extract the unique lat/lons and put them on a data frame
locations.data <- unique(cbind(as.character(data$Camera.Trap.Name), data$Latitude, data$Longitude))
locations.data <- data.frame(Camera.Trap.Name = locations.data[,1], Latitude = as.numeric(locations.data[,2]), Longitude = as.numeric(locations.data[,3]))
locations.data <- dplyr::arrange(locations.data, Camera.Trap.Name)
# If you have internet: Download the map from google
map <- get_map(location = c(c(lon[1],lat[1]),c(lon[2],lat[2])), zoom = 10, source = "google", maptype = "terrain")
# Plot the locations of Camera traps
ggmap(map, extent = "normal", maprange = T) + geom_point(data=locations.data, aes(x = Longitude, y = Latitude), colour="black", size = 0.1)
} # end of function
##----- 2 - Check spatial distribution of cameras
check.coord(juruena)
